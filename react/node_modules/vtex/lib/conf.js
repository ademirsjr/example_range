"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Configstore = require("configstore");
const path_1 = require("path");
const package_json_1 = require("../package.json");
const conf = new Configstore(package_json_1.name);
exports.configDir = path_1.dirname(conf.path);
var Environment;
(function (Environment) {
    Environment["Production"] = "prod";
})(Environment = exports.Environment || (exports.Environment = {}));
exports.saveAll = (config) => {
    conf.all = config;
};
exports.saveAccount = (account) => {
    const lastUsedAccount = exports.getAccount();
    if (lastUsedAccount !== account) {
        conf.set('_lastUsedAccount', lastUsedAccount);
        conf.delete('_lastUsedWorkspace');
    }
    conf.set('account', account);
};
exports.saveLogin = (login) => conf.set('login', login);
exports.saveToken = (token) => conf.set('token', token);
exports.saveWorkspace = (workspace = 'master') => {
    const lastUsedWorkspace = exports.getWorkspace();
    if (lastUsedWorkspace !== workspace) {
        conf.set('_lastUsedWorkspace', lastUsedWorkspace);
    }
    conf.set('workspace', workspace);
};
exports.saveEnvironment = (env) => conf.set('env', env);
exports.saveStickyHost = (appName, stickyHost) => conf.set(`apps.${appName}.sticky-host`, { stickyHost, lastUpdated: Date.now() });
exports.getAll = () => conf.all;
exports.getAccount = () => conf.get('account');
exports.getLogin = () => conf.get('login');
exports.getToken = () => conf.get('token');
exports.getWorkspace = () => conf.get('workspace');
exports.getStickyHost = (appName) => conf.get(`apps.${appName}.sticky-host`);
exports.hasStickyHost = (appName) => conf.has(`apps.${appName}.sticky-host`);
exports.getLastUsedAccount = () => conf.get('_lastUsedAccount');
exports.getLastUsedWorkspace = () => conf.get('_lastUsedWorkspace');
const envFromProcessEnv = {
    prod: Environment.Production,
};
let forcedEnv = null;
exports.forceEnvironment = (env) => {
    forcedEnv = env;
};
exports.getEnvironment = () => {
    const env = envFromProcessEnv[process.env.VTEX_ENV];
    const persisted = conf.get('env') || Environment.Production;
    return forcedEnv || env || persisted;
};
exports.clear = () => conf.clear();
exports.currentContext = {
    account: exports.getAccount(),
    workspace: exports.getWorkspace(),
};
var Region;
(function (Region) {
    Region["Production"] = "aws-us-east-1";
})(Region = exports.Region || (exports.Region = {}));
exports.saveAccountToken = (account, token) => {
    conf.set(`tokens.${account}`, token);
};
exports.getTokens = () => {
    return conf.get('tokens') || {};
};
