"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const clients_1 = require("./clients");
const conf_1 = require("./conf");
const logger_1 = require("./logger");
const login = conf_1.getLogin();
const account = conf_1.getAccount();
const workspace = conf_1.getWorkspace();
const workspaceState = (meta) => (meta.production ? 'production' : 'dev');
const getWorkspaceState = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const meta = yield clients_1.workspaces.get(account, workspace);
        return workspaceState(meta) + ' ';
    }
    catch (err) {
        logger_1.default.debug(`Unable to fetch workspace state`);
        logger_1.default.debug(err.message);
        return undefined;
    }
});
exports.greeting = () => __awaiter(void 0, void 0, void 0, function* () {
    if (account && login && workspace) {
        let loggedMessage = 'Logged into';
        let state = yield getWorkspaceState();
        if (!state) {
            loggedMessage = `${chalk_1.default.red('Not logged in')}. Previously logged into`;
            state = '';
        }
        return [
            `${loggedMessage} ${chalk_1.default.blue(account)} as ${chalk_1.default.green(login)} at ${chalk_1.default.yellowBright(state)}workspace ${chalk_1.default.green(workspace)}`,
        ];
    }
    return ['Welcome to VTEX I/O', `Login with ${chalk_1.default.green('vtex login')} ${chalk_1.default.blue('<account>')}`];
});
