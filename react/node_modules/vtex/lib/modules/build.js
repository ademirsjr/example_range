"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const conf_1 = require("../conf");
const errors_1 = require("../errors");
const logger_1 = require("../logger");
const sse_1 = require("../sse");
const allEvents = ['logs', 'build.status'];
const onBuildEvent = (ctx, appOrKey, callback, senders) => {
    const unlistenLogs = sse_1.logAll(ctx, logger_1.default.level, appOrKey, senders);
    const unlistenBuild = sse_1.onEvent(ctx, 'vtex.builder-hub', appOrKey, ['build.status'], message => callback('build.status', message));
    const unlistenMap = {
        'build.status': unlistenBuild,
        logs: unlistenLogs,
    };
    return (...types) => {
        types.forEach(type => {
            unlistenMap[type]();
        });
    };
};
const runErrorAction = (code, message, errorActions) => {
    const action = errorActions[code];
    if (action) {
        action();
    }
    else {
        logger_1.default.error(`App build failed with message: ${message}`);
    }
};
const listen = (appOrKey, options = {}) => {
    return new Promise((resolve, reject, onCancel) => {
        const { waitCompletion, onError = {}, onBuild = false, context = conf_1.currentContext, senders = null } = options;
        const callback = (eventType, eventData) => {
            if (eventType === 'build.status') {
                const { body: { code, details, message }, } = eventData;
                if (code === 'success') {
                    if (waitCompletion) {
                        unlisten(...allEvents); // eslint-disable-line @typescript-eslint/no-use-before-define
                        resolve(() => undefined);
                    }
                    if (onBuild) {
                        onBuild();
                    }
                }
                if (code === 'fail') {
                    runErrorAction(details.errorCode, message, onError);
                    if (waitCompletion) {
                        unlisten(...allEvents); // eslint-disable-line @typescript-eslint/no-use-before-define
                        reject(new errors_1.BuildFailError(eventData));
                    }
                }
            }
        };
        const unlisten = onBuildEvent(context, appOrKey, callback, senders);
        const unlistenAll = () => unlisten(...allEvents);
        onCancel(unlistenAll);
        if (!waitCompletion) {
            resolve(unlistenAll);
        }
    });
};
exports.listenBuild = (appOrKey, triggerBuild, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const listenPromise = listen(appOrKey, options);
    try {
        const response = yield triggerBuild();
        const unlisten = yield listenPromise;
        return { response, unlisten };
    }
    catch (e) {
        listenPromise.cancel();
        throw e;
    }
});
