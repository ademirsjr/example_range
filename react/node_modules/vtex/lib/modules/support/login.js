"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const chalk_1 = require("chalk");
const enquirer = require("enquirer");
const jwt = require("jsonwebtoken");
const ramda_1 = require("ramda");
const conf_1 = require("../../conf");
const env = require("../../env");
const logger_1 = require("../../logger");
const getAvailableRoles = (region, token, supportedAccount) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield axios_1.default.get(`http://support-authority.vtex.${region}.vtex.io/${conf_1.getAccount()}/${conf_1.getWorkspace()}/${supportedAccount}/roles`, {
        headers: {
            Authorization: token,
            'X-Vtex-Original-Credential': token,
        },
    });
    return response.data;
});
const promptRoles = (roles) => __awaiter(void 0, void 0, void 0, function* () {
    const cancel = 'Cancel';
    const chosen = ramda_1.prop('role', yield enquirer.prompt({
        name: 'role',
        message: 'Which role do you want to assume?',
        type: 'select',
        choices: [...roles, cancel],
    }));
    if (chosen === cancel) {
        logger_1.default.info('Bye! o/');
        return process.exit();
    }
    return chosen;
});
const loginAsRole = (region, token, supportedAccount, role) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield axios_1.default.get(`http://support-authority.vtex.${region}.vtex.io/${conf_1.getAccount()}/${conf_1.getWorkspace()}/${supportedAccount}/login/${role}`, {
        headers: {
            Authorization: token,
            'X-Vtex-Original-Credential': token,
        },
    });
    return response.data;
});
const assertToken = (raw) => {
    if (!jwt.decode(raw)) {
        throw Error(`Could not validate new token! token = '${raw}'`);
    }
};
const saveSupportCredentials = (account, token) => {
    conf_1.saveAccount(account);
    conf_1.saveWorkspace('master');
    conf_1.saveToken(token);
};
exports.default = (account) => __awaiter(void 0, void 0, void 0, function* () {
    if (!account) {
        logger_1.default.error(`Please specify the account that will receive support. type vtex --help for more information.`);
        return;
    }
    const actualToken = conf_1.getToken();
    const region = env.region();
    try {
        const roles = yield getAvailableRoles(region, actualToken, account);
        if (roles.length === 0) {
            logger_1.default.error('No support roles available for this account.');
            return;
        }
        const role = yield promptRoles(roles);
        const newToken = yield loginAsRole(region, actualToken, account, role);
        assertToken(newToken);
        saveSupportCredentials(account, newToken);
        logger_1.default.info(`Logged into ${chalk_1.default.blue(account)} with role ${role}!`);
    }
    catch (err) {
        if (err.message) {
            logger_1.default.error(err.message);
            if (err.response && err.response.status === 404) {
                logger_1.default.info('Make sure vtex.support-authority is installed in your workspace.');
            }
            return;
        }
        logger_1.default.error(err);
    }
});
