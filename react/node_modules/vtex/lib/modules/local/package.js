"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const ramda_1 = require("ramda");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const PREFIX = 'npm:';
const npmReducer = dependencies => (acc, k) => k.startsWith(PREFIX) ? ramda_1.assoc(k.replace(PREFIX, ''), dependencies[k], acc) : acc;
const vtexReducer = dependencies => (acc, k) => k.startsWith(PREFIX) ? acc : ramda_1.assoc(k, dependencies[k], acc);
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    const manifest = yield manifest_1.getManifest();
    const pkg = Object.assign(Object.assign({}, manifest), { version: null, vtexVersion: manifest.version, dependencies: ramda_1.reduce(npmReducer(manifest.dependencies), {}, ramda_1.keys(manifest.dependencies).sort()), vtexDependencies: ramda_1.reduce(vtexReducer(manifest.dependencies), {}, ramda_1.keys(manifest.dependencies).sort()) });
    logger_1.default.debug('Generating package:', JSON.stringify(pkg, null, 2));
    yield fs_extra_1.outputJson(path_1.resolve(process.cwd(), 'package.json'), pkg, { spaces: 2 });
    logger_1.default.info('Generated package.json successfully.');
});
