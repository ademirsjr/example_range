"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const conf_1 = require("../../conf");
const env = require("../../env");
const user_agent_1 = require("../../user-agent");
const utils_1 = require("../utils");
const utils_2 = require("./utils");
const dummyLogger_1 = require("../../clients/dummyLogger");
const context = (workspace) => {
    // Returns default context with variable workspace name.
    return {
        account: conf_1.getAccount(),
        authToken: conf_1.getToken(),
        production: false,
        product: '',
        region: env.region(),
        route: {
            id: '',
            params: {},
        },
        userAgent: user_agent_1.default,
        workspace,
        requestId: '',
        operationId: '',
        logger: dummyLogger_1.dummyLogger,
        platform: '',
    };
};
exports.default = (workspace1 = 'master', workspace2 = conf_1.getWorkspace()) => __awaiter(void 0, void 0, void 0, function* () {
    const deps1 = yield utils_2.getCleanDependencies(context(workspace1));
    const deps2 = yield utils_2.getCleanDependencies(context(workspace2));
    const diffTable = utils_1.matchedDepsDiffTable(workspace1, workspace2, deps1, deps2);
    if (diffTable.length === 1) {
        return console.log(`${chalk_1.default.yellow('Dependency diff')} between ${chalk_1.default.yellow(workspace1)} and ${chalk_1.default.yellow(workspace2)} is empty\n`);
    }
    console.log(`${chalk_1.default.yellow('Dependency diff')} between ${chalk_1.default.yellow(workspace1)} and ${chalk_1.default.yellow(workspace2)}`);
    console.log(diffTable.toString());
});
