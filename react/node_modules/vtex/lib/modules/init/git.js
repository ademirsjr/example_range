"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const pipeStreams = require("pipe-streams-to-promise");
const request = require("request");
const unzip = require("unzip-stream");
const urlForRepo = (repo) => `https://github.com/vtex-apps/${repo}/archive/master.zip`;
const fetchAndUnzip = (url, path) => __awaiter(void 0, void 0, void 0, function* () { return pipeStreams([request(url), unzip.Extract({ path })]); });
exports.clone = (repo) => __awaiter(void 0, void 0, void 0, function* () {
    const cwd = process.cwd();
    const url = urlForRepo(repo);
    const destPath = `${cwd}/${repo}`;
    const cloned = `${destPath}/${repo}-master`;
    yield fs_extra_1.ensureDir(destPath);
    yield fs_extra_1.emptyDir(destPath);
    yield fetchAndUnzip(url, destPath);
    yield fs_extra_1.copy(cloned, destPath);
    yield fs_extra_1.remove(cloned);
});
