"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bluebird = require("bluebird");
const chalk_1 = require("chalk");
const enquirer = require("enquirer");
const fs_extra_1 = require("fs-extra");
const moment = require("moment");
const path_1 = require("path");
const ramda_1 = require("ramda");
const conf_1 = require("../../conf");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const prompts_1 = require("../prompts");
const git = require("./git");
const { mapSeries } = Bluebird;
const VTEXInternalTemplates = [
    // Only show these templates for VTEX e-mail users.
    'graphql-example',
    'service-example',
    'react-guide',
    'masterdata-graphql-guide',
];
const templates = {
    'graphql-example': 'graphql-example',
    'admin-example': 'admin-example',
    'store-theme': 'store-theme',
    'delivery-theme': 'delivery-theme',
    'service-example': 'service-example',
    'render-guide': 'render-guide',
    'masterdata-graphql-guide': 'masterdata-graphql-guide',
    'support app': 'hello-support',
    'react-guide': 'react-app-template',
};
const titles = {
    'graphql-example': 'GraphQL Example',
    'admin-example': 'Admin Example',
    'store-theme': 'Store Theme',
    'delivery-theme': 'Delivery Store Theme',
    'service-example': 'Node Service Example',
    'render-guide': 'Render Guide',
    'masterdata-graphql-guide': 'MasterData GraphQL Guide',
    'support app': 'Support App Example',
    'react-guide': 'React App Template',
};
const descriptions = {
    'graphql-example': 'Example for building GraphQL Backend apps',
    'admin-example': 'Example for building apps in Admin',
    'store-theme': 'VTEX IO Store Theme',
    'delivery-theme': 'VTEX IO Delivery Store Theme',
    'service-example': `Example of @vtex/api's Service class`,
    'render-guide': 'VTEX IO Render Guide',
    'masterdata-graphql-guide': 'VTEX IO MasterData GraphQL Guide',
    'support app': 'Example of a support app',
    'react-guide': 'Guide for react apps structure',
};
const getTemplates = () => 
// Return all templates if user's e-mail is `...@vtex...`.
// Otherwise filter the VTEX internal templates.
ramda_1.test(/\@vtex\./, conf_1.getLogin()) ? ramda_1.keys(templates) : ramda_1.reject(x => VTEXInternalTemplates.indexOf(x) >= 0, ramda_1.keys(templates));
const promptName = (repo) => __awaiter(void 0, void 0, void 0, function* () {
    const message = 'The app name should only contain numbers, lowercase letters, underscores and hyphens.';
    return ramda_1.prop('name', yield enquirer.prompt({
        name: 'name',
        message: "What's your VTEX app name?",
        validate: s => /^[a-z0-9\-_]+$/.test(s) || message,
        filter: s => s.trim(),
        type: 'input',
        initial: repo,
    }));
});
const promptVendor = () => __awaiter(void 0, void 0, void 0, function* () {
    const message = 'The vendor should only contain numbers, lowercase letters, underscores and hyphens.';
    return ramda_1.prop('vendor', yield enquirer.prompt({
        name: 'vendor',
        message: "What's your VTEX app vendor?",
        validate: s => /^[a-z0-9\-_]+$/.test(s) || message,
        filter: s => s.trim(),
        type: 'input',
        initial: conf_1.getAccount(),
    }));
});
const promptTitle = (repo) => __awaiter(void 0, void 0, void 0, function* () {
    return ramda_1.prop('title', yield enquirer.prompt({
        name: 'title',
        message: "What's your VTEX app title?",
        filter: s => s.trim(),
        type: 'input',
        initial: titles[repo],
    }));
});
const promptDescription = (repo) => __awaiter(void 0, void 0, void 0, function* () {
    return ramda_1.prop('description', yield enquirer.prompt({
        name: 'description',
        message: "What's your VTEX app description?",
        filter: s => s.trim(),
        type: 'input',
        initial: descriptions[repo],
    }));
});
const promptTemplates = () => __awaiter(void 0, void 0, void 0, function* () {
    const cancel = 'Cancel';
    const chosen = ramda_1.prop('service', yield enquirer.prompt({
        name: 'service',
        message: 'Choose where do you want to start from',
        type: 'select',
        choices: [...getTemplates(), cancel],
    }));
    if (chosen === cancel) {
        logger_1.default.info('Bye o/');
        return process.exit();
    }
    return chosen;
});
const promptContinue = (repoName) => __awaiter(void 0, void 0, void 0, function* () {
    const proceed = yield prompts_1.promptConfirm(`You are about to create the new folder ${process.cwd()}/${repoName}. Do you want to continue?`);
    if (!proceed) {
        logger_1.default.info('Bye o/');
        process.exit();
    }
});
const manifestFromPrompt = (repo) => __awaiter(void 0, void 0, void 0, function* () {
    return mapSeries([promptName, promptVendor, promptTitle, promptDescription], f => f(repo));
});
const createManifest = (name, vendor, title = '', description = '') => {
    const [year, ...monthAndDay] = moment()
        .format('YYYY-MM-DD')
        .split('-');
    return {
        name,
        vendor,
        version: '0.1.0',
        title,
        description,
        mustUpdateAt: `${Number(year) + 1}-${monthAndDay.join('-')}`,
        registries: ['smartcheckout'],
    };
};
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.default.debug('Prompting for app info');
    logger_1.default.info('Hello! I will help you generate basic files and folders for your app.');
    try {
        const repo = templates[yield promptTemplates()];
        const manifestPath = path_1.join(process.cwd(), repo, manifest_1.MANIFEST_FILE_NAME);
        yield promptContinue(repo);
        logger_1.default.info(`Cloning https://vtex-apps/${repo}.git`);
        const [, [name, vendor, title, description]] = yield Bluebird.all([git.clone(repo), manifestFromPrompt(repo)]);
        const synthetic = createManifest(name, vendor, title, description);
        const manifest = ramda_1.merge((yield fs_extra_1.readJson(manifestPath)) || {}, synthetic);
        yield fs_extra_1.outputJson(manifestPath, manifest, { spaces: 2 });
        logger_1.default.info(`Run ${chalk_1.default.bold.green(`cd ${repo}`)} and ${chalk_1.default.bold.green('vtex link')} to start developing!`);
    }
    catch (err) {
        logger_1.default.error(err.message);
        logger_1.default.debug(err);
    }
});
