"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const prompts_1 = require("../prompts");
const use_1 = require("./use");
const { promote, get } = clients_1.workspaces;
const [account, currentWorkspace] = [conf_1.getAccount(), conf_1.getWorkspace()];
const isMaster = Promise.method((workspace) => {
    if (workspace === 'master') {
        throw new errors_1.CommandError(`It is not possible to promote workspace ${workspace} to master`);
    }
});
const isPromotable = (workspace) => isMaster(workspace).then(() => __awaiter(void 0, void 0, void 0, function* () {
    const meta = yield get(account, currentWorkspace);
    if (!meta.production) {
        throw new errors_1.CommandError(`Workspace ${chalk_1.default.green(currentWorkspace)} is not a ${chalk_1.default.green('production')} workspace\nOnly production workspaces may be promoted\nUse the command ${chalk_1.default.blue('vtex workspace create <workspace> --production')} to create a production workspace`);
    }
}));
const promptPromoteConfirm = (workspace) => prompts_1.promptConfirm(`Are you sure you want to promote workspace ${chalk_1.default.green(workspace)} to master?`, true).then(answer => {
    if (!answer) {
        throw new errors_1.UserCancelledError();
    }
});
exports.default = () => {
    logger_1.default.debug('Promoting workspace', currentWorkspace);
    return isPromotable(currentWorkspace)
        .then(() => promptPromoteConfirm(currentWorkspace))
        .then(() => promote(account, currentWorkspace))
        .tap(() => logger_1.default.info(`Workspace ${chalk_1.default.green(currentWorkspace)} promoted successfully`))
        .then(() => use_1.default('master'));
};
