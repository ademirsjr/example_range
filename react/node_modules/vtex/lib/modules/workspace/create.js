"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const clients_1 = require("../../clients");
const clients_2 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const VALID_WORKSPACE = /^[a-z][a-z0-9]{0,126}[a-z0-9]$/;
const warmUpRouteMap = (workspace) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { builder } = clients_2.createClients({ workspace: workspace });
        yield builder.availability('vtex.builder-hub@0.x', null);
        logger_1.default.debug('Warmed up route map');
    }
    catch (err) {
        return;
    }
});
exports.default = (name, options) => __awaiter(void 0, void 0, void 0, function* () {
    if (!VALID_WORKSPACE.test(name)) {
        throw new errors_1.CommandError("Whoops! That's not a valid workspace name. Please use only lowercase letters and numbers.");
    }
    logger_1.default.debug('Creating workspace', name);
    let production = false;
    if (options.p || options.production) {
        production = true;
    }
    try {
        yield clients_1.workspaces.create(conf_1.getAccount(), name, production);
        logger_1.default.info(`Workspace ${chalk_1.default.green(name)} created ${chalk_1.default.green('successfully')} with ${chalk_1.default.green(`production=${production}`)}`);
        // First request on a brand new workspace takes very long because of route map generation, so we warm it up.
        yield warmUpRouteMap(name);
    }
    catch (err) {
        if (err.response && err.response.data.code === 'WorkspaceAlreadyExists') {
            logger_1.default.error(err.response.data.message);
            return;
        }
        throw err;
    }
});
