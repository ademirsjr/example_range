"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
const chalk_1 = require("chalk");
const enquirer = require("enquirer");
const numbro = require("numbro");
const ramda_1 = require("ramda");
const clients_1 = require("../../../clients");
const abTester_1 = require("../../../clients/abTester");
const conf_1 = require("../../../conf");
const env = require("../../../env");
const errors_1 = require("../../../errors");
const timeout_1 = require("../../../timeout");
const user_agent_1 = require("../../../user-agent");
const dummyLogger_1 = require("../../../clients/dummyLogger");
const account = conf_1.getAccount();
const DEFAULT_TIMEOUT = 15000;
exports.SIGNIFICANCE_LEVELS = {
    low: 0.5,
    mid: 0.7,
    high: 0.9,
};
const contextForMaster = {
    account,
    authToken: conf_1.getToken(),
    production: false,
    product: '',
    region: env.region(),
    route: {
        id: '',
        params: {},
    },
    userAgent: user_agent_1.default,
    workspace: 'master',
    requestId: '',
    operationId: '',
    logger: dummyLogger_1.dummyLogger,
    platform: '',
};
const options = { timeout: (timeout_1.default || DEFAULT_TIMEOUT) };
// Clients for the 'master' workspace
exports.abtester = new abTester_1.ABTester(contextForMaster, Object.assign(Object.assign({}, options), { retries: 3 }));
exports.apps = new api_1.Apps(contextForMaster, options);
exports.formatDays = (days) => {
    let suffix = 'days';
    if (days === 1) {
        suffix = 'day';
    }
    return `${numbro(days).format('0,0')} ${suffix}`;
};
exports.formatDuration = (durationInMinutes) => {
    const minutes = durationInMinutes % 60;
    const hours = Math.trunc(durationInMinutes / 60) % 24;
    const days = Math.trunc(durationInMinutes / (60 * 24));
    return `${days} days, ${hours} hours and ${minutes} minutes`;
};
exports.installedABTester = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return yield exports.apps.getApp('vtex.ab-tester@x');
    }
    catch (e) {
        if (e.response.data.code === 'app_not_found') {
            throw new errors_1.CommandError(`The app ${chalk_1.default.yellow('vtex.ab-tester')} is \
not installed in account ${chalk_1.default.green(account)}, workspace \
${chalk_1.default.blue('master')}. Please install it before attempting to use A/B \
testing functionality`);
        }
        throw e;
    }
});
exports.promptProductionWorkspace = (promptMessage) => __awaiter(void 0, void 0, void 0, function* () {
    const productionWorkspaces = yield clients_1.workspaces.list(account).then(ramda_1.compose(ramda_1.map(({ name }) => name), ramda_1.filter(({ name, production }) => production === true && name !== 'master')));
    return yield enquirer
        .prompt({
        name: 'workspace',
        message: promptMessage,
        type: 'select',
        choices: productionWorkspaces,
    })
        .then(ramda_1.prop('workspace'));
});
exports.promptConstraintDuration = () => __awaiter(void 0, void 0, void 0, function* () {
    const message = 'The amount of time should be an integer.';
    return ramda_1.prop('time', yield enquirer.prompt({
        name: 'proportion',
        message: "What's the amount of time respecting the restriction?",
        validate: s => /^[0-9]+$/.test(s) || message,
        filter: s => s.trim(),
        type: 'input',
    }));
});
exports.promptProportionTrafic = () => __awaiter(void 0, void 0, void 0, function* () {
    const message = 'The proportion of traffic directed to a workspace should be an integer between 0 and 10000.';
    return ramda_1.prop('proportion', yield enquirer.prompt({
        name: 'proportion',
        message: `What's the proportion of traffic initially directed to workspace ${chalk_1.default.blue('master')}?
      This should be an integer between 0 and 10000 that corresponds each 1% to 100, i.e. if you want to direct 54.32% of traffic to master, this value should be 5432.
      If you don't want to fix this value, just type any value here and set the next restriction to 0.`,
        validate: s => /^([0-9]{1,4}|10000)$/.test(s) || message,
        filter: s => s.trim(),
        type: 'input',
    }));
});
