"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const enquirer = require("enquirer");
const ramda_1 = require("ramda");
const conf_1 = require("../../../conf");
const errors_1 = require("../../../errors");
const logger_1 = require("../../../logger");
const prompts_1 = require("../../prompts");
const status_1 = require("./status");
const utils_1 = require("./utils");
const [account] = [conf_1.getAccount()];
const promptContinue = (workspace) => __awaiter(void 0, void 0, void 0, function* () {
    const proceed = yield prompts_1.promptConfirm(`You are about to finish A/B testing in workspace \
${chalk_1.default.blue(workspace)}, account ${chalk_1.default.green(account)}. Are you sure?`, false);
    if (!proceed) {
        throw new errors_1.UserCancelledError();
    }
});
const promptWorkspaceToFinishABTest = () => __awaiter(void 0, void 0, void 0, function* () {
    return yield utils_1.abtester
        .status()
        .then(ramda_1.map(({ WorkspaceB }) => WorkspaceB))
        .then((workspaces) => enquirer.prompt({
        name: 'workspace',
        message: 'Choose which workspace to finish A/B testing:',
        type: 'select',
        choices: workspaces,
    }))
        .then(ramda_1.prop('workspace'));
});
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    yield utils_1.installedABTester();
    const workspace = yield promptWorkspaceToFinishABTest();
    yield promptContinue(workspace);
    logger_1.default.info('Finishing A/B tests');
    logger_1.default.info(`Latest results:`);
    yield status_1.default();
    yield utils_1.abtester.finish(workspace);
    logger_1.default.info(`A/B testing with workspace ${chalk_1.default.blue(workspace)} is now finished`);
    logger_1.default.info(`No traffic currently directed to ${chalk_1.default.blue(workspace)}`);
});
