"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const prompts_1 = require("../prompts");
const create_1 = require("./create");
const reset_1 = require("./reset");
const promptWorkspaceCreation = (name) => {
    console.log(chalk_1.default.blue('!'), `Workspace ${chalk_1.default.green(name)} doesn't exist`);
    return prompts_1.promptConfirm('Do you wish to create it?');
};
const promptWorkspaceProductionFlag = () => prompts_1.promptConfirm('Should the workspace be in production mode?', false);
const shouldPromptProduction = (production) => {
    return production === undefined || production === null;
};
exports.default = (name, options) => __awaiter(void 0, void 0, void 0, function* () {
    const reset = options ? options.r || options.reset : null;
    let production = options ? options.p || options.production : null;
    let confirm;
    const accountName = conf_1.getAccount();
    if (name === '-') {
        name = conf_1.getLastUsedWorkspace();
        if (name == null) {
            throw new errors_1.CommandError('No last used workspace was found');
        }
    }
    try {
        yield clients_1.workspaces.get(accountName, name);
    }
    catch (err) {
        if (err.response && err.response.status === 404) {
            confirm = yield promptWorkspaceCreation(name);
            if (!confirm) {
                throw new errors_1.UserCancelledError();
            }
            if (shouldPromptProduction(production)) {
                production = yield promptWorkspaceProductionFlag();
            }
            yield create_1.default(name, { production });
        }
        else {
            throw err;
        }
    }
    yield conf_1.saveWorkspace(name);
    if (reset && !confirm) {
        yield reset_1.default(name, { production });
    }
    logger_1.default.info(`You're now using the workspace ${chalk_1.default.green(name)} on account ${chalk_1.default.blue(accountName)}!`);
});
