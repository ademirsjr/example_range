"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const ramda_1 = require("ramda");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    const manifest = yield manifest_1.getManifest();
    const oldReact = manifest.builders.react;
    if (!oldReact || ['0.x', '1.x'].indexOf(oldReact) === -1) {
        throw new errors_1.CommandError("Couldn't find react builder 0.x-1.x in manifest");
    }
    if (manifest.builders.react === '0.x') {
        const renderJson = yield fs_extra_1.readJSON('react/render.json').catch(() => null);
        if (!renderJson) {
            throw new errors_1.CommandError("Couldn't find react/render.json file");
        }
        logger_1.default.info('Porting react code to react builder version 2.x');
        const { extensions: react0Extensions } = renderJson;
        const pages = {};
        const extensions = {};
        ramda_1.forEachObjIndexed((val, key) => {
            const { route, component, theme, settings } = val;
            if (route && route.path) {
                pages[key] = Object.assign(Object.assign({}, route), { theme: theme && theme.replace('./', '').replace('.css', '') });
            }
            if (component) {
                extensions[key] = {
                    component: component && component.replace('./', '').replace('.js', ''),
                    props: settings,
                };
            }
        }, react0Extensions);
        const pagesFile = Object.assign(Object.assign({}, (!ramda_1.isEmpty(pages) && { pages })), (!ramda_1.isEmpty(extensions) && { extensions }));
        yield fs_extra_1.outputJSON('pages/pages.json', pagesFile, { spaces: 2 });
        yield fs_extra_1.remove('react/render.json');
    }
    manifest.builders.react = '2.x';
    manifest.builders.pages = '0.x';
    yield fs_extra_1.outputJSON('manifest.json', manifest, { spaces: 2 });
    logger_1.default.info(`Ported react builder successfully. ${oldReact === '0.x' ? 'Please check your pages/pages.json file.' : ''}`);
});
