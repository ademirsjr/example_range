"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const R = require("ramda");
const sponsor_1 = require("../../clients/sponsor");
const conf = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const switch_1 = require("../auth/switch");
const prompts_1 = require("../prompts");
const utils_1 = require("../utils");
const utils_2 = require("../utils");
const promptChangeToSponsorAccount = (sponsorAccount) => __awaiter(void 0, void 0, void 0, function* () {
    const proceed = yield prompts_1.promptConfirm(`Do you wish to log into the sponsor account ${sponsorAccount}?`);
    if (!proceed) {
        throw new errors_1.UserCancelledError();
    }
    yield switch_1.default(sponsorAccount, {});
});
exports.default = (edition) => __awaiter(void 0, void 0, void 0, function* () {
    const previousConf = conf.getAll();
    const previousAccount = previousConf.account;
    const sponsorClient = new sponsor_1.Sponsor(utils_2.getIOContext(), utils_2.IOClientOptions);
    const data = yield sponsorClient.getSponsorAccount();
    const sponsorAccount = R.prop('sponsorAccount', data);
    if (!sponsorAccount) {
        throw new Error(`No sponsor account found for account ${chalk_1.default.blue(previousAccount)}`);
    }
    if (previousAccount !== sponsorAccount) {
        yield promptChangeToSponsorAccount(sponsorAccount);
    }
    const sponsorClientForSponsorAccount = new sponsor_1.Sponsor(utils_2.getIOContext(), utils_2.IOClientOptions);
    yield sponsorClientForSponsorAccount.setEdition(previousAccount, edition);
    logger_1.default.info(`Successfully set new edition in account ${chalk_1.default.blue(previousAccount)}. You stil need to wait for the house keeper to update this account.`);
    yield utils_1.switchToPreviousAccount(previousConf);
});
