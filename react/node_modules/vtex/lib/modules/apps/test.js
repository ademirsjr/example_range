"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const retry = require("async-retry");
const bluebird = require("bluebird");
const chalk_1 = require("chalk");
const ramda_1 = require("ramda");
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const host_1 = require("../../host");
const locator_1 = require("../../locator");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const build_1 = require("../build");
const utils_1 = require("../utils");
const utils_2 = require("../utils");
const file_1 = require("./file");
const utils_3 = require("./utils");
const root = manifest_1.getAppRoot();
const AVAILABILITY_TIMEOUT = 1000;
const N_HOSTS = 3;
const buildersToRunLocalYarn = ['react', 'node'];
const RETRY_OPTS_TEST = {
    retries: 2,
    minTimeout: 1000,
    factor: 2,
};
const performTest = (appId, builder, extraData, unsafe) => __awaiter(void 0, void 0, void 0, function* () {
    const linkConfig = yield file_1.createLinkConfig(root);
    extraData.linkConfig = linkConfig;
    const usedDeps = ramda_1.toPairs(linkConfig.metadata);
    if (usedDeps.length) {
        const plural = usedDeps.length > 1;
        logger_1.default.info(`The following local dependenc${plural ? 'ies are' : 'y is'} linked to your app:`);
        usedDeps.forEach(([dep, path]) => logger_1.default.info(`${dep} (from: ${path})`));
        logger_1.default.info(`If you don\'t want ${plural ? 'them' : 'it'} to be used by your vtex app, please unlink ${plural ? 'them' : 'it'}`);
    }
    const testApp = (bail, tryCount) => __awaiter(void 0, void 0, void 0, function* () {
        const test = true;
        const [localFiles, linkedFiles] = yield Promise.all([
            file_1.listLocalFiles(root, test).then(paths => ramda_1.map(utils_3.pathToFileObject(root), paths)),
            file_1.getLinkedFiles(linkConfig),
        ]);
        const filesWithContent = ramda_1.concat(localFiles, linkedFiles);
        if (tryCount === 1) {
            const linkedFilesInfo = linkedFiles.length ? `(${linkedFiles.length} from linked node modules)` : '';
            logger_1.default.info(`Sending ${filesWithContent.length} file${filesWithContent.length > 1 ? 's' : ''} ${linkedFilesInfo}`);
            logger_1.default.debug('Sending files');
            filesWithContent.forEach(p => logger_1.default.debug(p.path));
        }
        if (tryCount > 1) {
            logger_1.default.info(`Retrying...${tryCount - 1}`);
        }
        const stickyHint = yield host_1.getSavedOrMostAvailableHost(appId, builder, N_HOSTS, AVAILABILITY_TIMEOUT);
        const testOptions = { sticky: true, stickyHint };
        try {
            const { code } = yield builder.testApp(appId, filesWithContent, testOptions, { tsErrorsAsWarnings: unsafe });
            if (code !== 'build.accepted') {
                bail(new Error('Please, update your builder-hub to the latest version!'));
            }
        }
        catch (err) {
            const response = err.response;
            const status = response.status;
            const data = response && response.data;
            const message = data.message;
            const statusMessage = status ? `: Status ${status}` : '';
            logger_1.default.error(`Error testing app${statusMessage} (try: ${tryCount})`);
            if (message) {
                logger_1.default.error(`Message: ${message}`);
            }
            if (status && status < 500) {
                return;
            }
            throw err;
        }
    });
    yield retry(testApp, RETRY_OPTS_TEST);
});
exports.default = (options) => __awaiter(void 0, void 0, void 0, function* () {
    yield utils_3.validateAppAction('test');
    const unsafe = !!(options.unsafe || options.u);
    const manifest = yield manifest_1.getManifest();
    try {
        yield manifest_1.writeManifestSchema();
    }
    catch (e) {
        logger_1.default.debug('Failed to write schema on manifest.');
    }
    const appId = locator_1.toAppLocator(manifest);
    const context = { account: conf_1.getAccount(), workspace: conf_1.getWorkspace(), environment: conf_1.getEnvironment() };
    const { builder } = clients_1.createClients(context, { timeout: 60000 });
    try {
        const aux = yield builder.getPinnedDependencies();
        const pinnedDeps = new Map(Object.entries(aux));
        yield bluebird.map(buildersToRunLocalYarn, utils_1.fixPinnedDependencies(pinnedDeps), { concurrency: 1 });
    }
    catch (e) {
        logger_1.default.info('Failed to check for pinned dependencies');
    }
    // Always run yarn locally for some builders
    ramda_1.map(utils_2.runYarnIfPathExists, buildersToRunLocalYarn);
    const onError = {
        build_failed: () => {
            logger_1.default.error(`App build failed. Waiting for changes...`);
        },
    };
    const onBuild = () => __awaiter(void 0, void 0, void 0, function* () {
        process.exit();
    });
    logger_1.default.info(`Testing app ${appId}`);
    const extraData = { linkConfig: null };
    try {
        const buildTrigger = performTest.bind(this, appId, builder, extraData, unsafe);
        const [subject] = appId.split('@');
        yield build_1.listenBuild(subject, buildTrigger, { waitCompletion: false, onBuild, onError }).then(ramda_1.prop('unlisten'));
    }
    catch (e) {
        if (e.response) {
            const { data } = e.response;
            if (data.code === 'routing_error' && /app_not_found.*vtex\.builder\-hub/.test(data.message)) {
                return logger_1.default.error('Please install vtex.builder-hub in your account to enable app testing (vtex install vtex.builder-hub)');
            }
            if (data.code === 'link_on_production') {
                throw new errors_1.CommandError(`Please use a dev workspace to test apps. Create one with (${chalk_1.default.blue('vtex use <workspace> -rp')}) to be able to test apps`);
            }
        }
        throw e;
    }
});
