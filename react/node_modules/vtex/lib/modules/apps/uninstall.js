"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const ramda_1 = require("ramda");
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const prompts_1 = require("../prompts");
const locator_1 = require("./../../locator");
const utils_1 = require("./utils");
const { uninstallApp } = clients_1.apps;
const promptAppUninstall = (appsList) => prompts_1.promptConfirm(`Are you sure you want to uninstall ${appsList.join(', ')} from account ${chalk_1.default.blue(conf_1.getAccount())}, workspace ${chalk_1.default.green(conf_1.getWorkspace())}?`).then(answer => {
    if (!answer) {
        throw new errors_1.UserCancelledError();
    }
});
const uninstallApps = (appsList) => __awaiter(void 0, void 0, void 0, function* () {
    if (appsList.length === 0) {
        return;
    }
    const app = manifest_1.validateApp(ramda_1.head(appsList).split('@')[0], true);
    try {
        logger_1.default.debug('Starting to uninstall app', app);
        yield uninstallApp(app);
        logger_1.default.info(`Uninstalled app ${app} successfully`);
    }
    catch (e) {
        logger_1.default.warn(`The following app was not uninstalled: ${app}`);
        logger_1.default.error(`${e.response.status}: ${e.response.statusText}. ${e.response.data.message}`);
    }
    yield uninstallApps(ramda_1.tail(appsList));
});
exports.default = (optionalApp, options) => __awaiter(void 0, void 0, void 0, function* () {
    yield utils_1.validateAppAction('uninstall', optionalApp);
    const app = optionalApp || locator_1.toAppLocator(yield manifest_1.getManifest());
    const appsList = ramda_1.prepend(app, utils_1.parseArgs(options._));
    const preConfirm = options.y || options.yes;
    if (!preConfirm) {
        yield promptAppUninstall(appsList);
    }
    logger_1.default.debug('Uninstalling app' + (appsList.length > 1 ? 's' : '') + `: ${appsList.join(', ')}`);
    return uninstallApps(appsList);
});
