"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const ramda_1 = require("ramda");
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const locator_1 = require("../../locator");
const logger_1 = require("../../logger");
const table_1 = require("../../table");
const { listApps } = clients_1.apps;
const cleanVersion = ramda_1.compose(ramda_1.head, ramda_1.split('+build'));
const filterBySource = (source) => ramda_1.filter(ramda_1.compose(ramda_1.equals(source), ramda_1.prop('_source')));
const renderTable = ({ title, emptyMessage, appArray, }) => {
    console.log(title);
    if (appArray.length === 0) {
        return console.log(`${emptyMessage}\n`);
    }
    const table = table_1.createTable();
    appArray.forEach(({ app }) => {
        const { vendor, name, version } = locator_1.parseLocator(app);
        const cleanedVersion = cleanVersion(version);
        const formattedName = `${chalk_1.default.blue(vendor)}${chalk_1.default.gray.bold('.')}${name}`;
        table.push([formattedName, cleanedVersion]);
    });
    console.log(`${table.toString()}\n`);
};
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    const account = conf_1.getAccount();
    const workspace = conf_1.getWorkspace();
    logger_1.default.debug('Starting to list apps');
    const appArray = yield listApps().then(ramda_1.prop('data'));
    renderTable({
        // Apps inherited by account's edition
        title: `${chalk_1.default.yellow('Edition Apps')} in ${chalk_1.default.blue(account)} at workspace ${chalk_1.default.yellow(workspace)}`,
        emptyMessage: 'You have no edition apps',
        appArray: filterBySource('edition')(appArray),
    });
    renderTable({
        // Installed apps
        title: `${chalk_1.default.yellow('Installed Apps')} in ${chalk_1.default.blue(account)} at workspace ${chalk_1.default.yellow(workspace)}`,
        emptyMessage: 'You have no installed apps',
        appArray: filterBySource('installation')(appArray),
    });
    renderTable({
        // Linked apps
        title: `${chalk_1.default.yellow('Linked Apps')} in ${chalk_1.default.blue(account)} at workspace ${chalk_1.default.yellow(workspace)}`,
        emptyMessage: 'You have no linked apps',
        appArray: filterBySource('link')(appArray),
    });
});
