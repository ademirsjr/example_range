"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const ramda_1 = require("ramda");
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const switch_1 = require("../auth/switch");
const prompts_1 = require("../prompts");
const locator_1 = require("./../../locator");
const utils_1 = require("./utils");
let originalAccount;
let originalWorkspace;
const switchToVendorMessage = (vendor) => {
    return `You are trying to deprecate this app in an account that differs from the indicated vendor. Do you want to deprecate in account ${chalk_1.default.blue(vendor)}?`;
};
const promptDeprecate = (appsList) => prompts_1.promptConfirm(`Are you sure you want to deprecate app` +
    (appsList.length > 1 ? 's' : '') +
    ` ${chalk_1.default.green(appsList.join(', '))}?`);
const promptDeprecateOnVendor = (msg) => prompts_1.promptConfirm(msg);
const switchToPreviousAccount = (previousAccount, previousWorkspace) => __awaiter(void 0, void 0, void 0, function* () {
    const currentAccount = conf_1.getAccount();
    if (previousAccount !== currentAccount) {
        const canSwitchToPrevious = yield promptDeprecateOnVendor(utils_1.switchAccountMessage(previousAccount, currentAccount));
        if (canSwitchToPrevious) {
            return yield switch_1.default(previousAccount, { workspace: previousWorkspace });
        }
    }
    return;
});
const deprecateApp = (app) => __awaiter(void 0, void 0, void 0, function* () {
    const { vendor, name, version } = locator_1.parseLocator(app);
    const account = conf_1.getAccount();
    if (vendor !== account) {
        const canSwitchToVendor = yield promptDeprecateOnVendor(switchToVendorMessage(vendor));
        if (!canSwitchToVendor) {
            throw new errors_1.UserCancelledError();
        }
        yield switch_1.default(vendor, {});
    }
    const context = { account: vendor, workspace: 'master', authToken: conf_1.getToken() };
    const { registry } = clients_1.createClients(context);
    return yield registry.deprecateApp(`${vendor}.${name}`, version);
});
const prepareDeprecate = (appsList) => __awaiter(void 0, void 0, void 0, function* () {
    if (appsList.length === 0) {
        yield switchToPreviousAccount(originalAccount, originalWorkspace);
        return;
    }
    const app = yield manifest_1.validateApp(ramda_1.head(appsList));
    try {
        logger_1.default.debug('Starting to deprecate app:', app);
        yield deprecateApp(app);
        logger_1.default.info('Successfully deprecated', app);
    }
    catch (e) {
        if (e.response && e.response.status && e.response.status === 404) {
            logger_1.default.error(`Error deprecating ${app}. App not found`);
        }
        else if (e.message && e.response.statusText) {
            logger_1.default.error(`Error deprecating ${app}. ${e.message}. ${e.response.statusText}`);
            return yield switchToPreviousAccount(originalAccount, originalWorkspace);
        }
        else {
            yield switchToPreviousAccount(originalAccount, originalWorkspace);
            throw e;
        }
    }
    yield prepareDeprecate(ramda_1.tail(appsList));
});
exports.default = (optionalApp, options) => __awaiter(void 0, void 0, void 0, function* () {
    const preConfirm = options.y || options.yes;
    originalAccount = conf_1.getAccount();
    originalWorkspace = conf_1.getWorkspace();
    const appsList = ramda_1.prepend(optionalApp || locator_1.toAppLocator(yield manifest_1.getManifest()), utils_1.parseArgs(options._));
    if (!preConfirm && !(yield promptDeprecate(appsList))) {
        throw new errors_1.UserCancelledError();
    }
    logger_1.default.debug('Deprecating app' + (appsList.length > 1 ? 's' : '') + `: ${appsList.join(', ')}`);
    return prepareDeprecate(appsList);
});
