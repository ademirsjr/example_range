"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const chalk_1 = require("chalk");
const ramda_1 = require("ramda");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const switch_1 = require("../auth/switch");
const prompts_1 = require("../prompts");
const locator_1 = require("./../../locator");
const utils_1 = require("./utils");
const undeprecateRequestTimeOut = 10000; // 10 seconds
let originalAccount;
let originalWorkspace;
const switchToVendorMessage = (vendor) => {
    return `You are trying to undeprecate this app in an account that differs from the indicated vendor. Do you want to undeprecate in account ${chalk_1.default.blue(vendor)}?`;
};
const promptUndeprecate = (appsList) => prompts_1.promptConfirm(`Are you sure you want to undeprecate app` +
    (appsList.length > 1 ? 's' : '') +
    ` ${chalk_1.default.green(appsList.join(', '))}?`);
const promptUndeprecateOnVendor = (msg) => prompts_1.promptConfirm(msg);
const switchToPreviousAccount = (previousAccount, previousWorkspace) => __awaiter(void 0, void 0, void 0, function* () {
    const currentAccount = conf_1.getAccount();
    if (previousAccount !== currentAccount) {
        const canSwitchToPrevious = yield promptUndeprecateOnVendor(utils_1.switchAccountMessage(previousAccount, currentAccount));
        if (canSwitchToPrevious) {
            yield switch_1.default(previousAccount, { workspace: previousWorkspace });
            return;
        }
    }
    return;
});
const undeprecateApp = (app) => __awaiter(void 0, void 0, void 0, function* () {
    const { vendor, name, version } = locator_1.parseLocator(app);
    const account = conf_1.getAccount();
    if (vendor !== account) {
        const canSwitchToVendor = yield promptUndeprecateOnVendor(switchToVendorMessage(vendor));
        if (!canSwitchToVendor) {
            throw new errors_1.UserCancelledError();
        }
        yield switch_1.default(vendor, {});
    }
    // The below 'axios' request is temporary until we implement an
    // `undeprecateApp` method in node-vtex-api and upgrade the library version
    // used in this project.
    const http = axios_1.default.create({
        baseURL: `http://apps.${conf_1.Region.Production}.vtex.io/`,
        timeout: undeprecateRequestTimeOut,
        headers: {
            Authorization: conf_1.getToken(),
            'Content-Type': 'application/json',
        },
    });
    const finalroute = `http://apps.${conf_1.Region.Production}.vtex.io/${vendor}/master/registry/${vendor}.${name}/${version}`;
    return yield http.patch(finalroute, { deprecated: false });
});
const prepareUndeprecate = (appsList) => __awaiter(void 0, void 0, void 0, function* () {
    if (appsList.length === 0) {
        yield switchToPreviousAccount(originalAccount, originalWorkspace);
        return;
    }
    const app = yield manifest_1.validateApp(ramda_1.head(appsList));
    try {
        logger_1.default.debug('Starting to undeprecate app:', app);
        yield undeprecateApp(app);
        logger_1.default.info('Successfully undeprecated', app);
    }
    catch (e) {
        if (e.response && e.response.status && e.response.status === 404) {
            logger_1.default.error(`Error undeprecating ${app}. App not found`);
        }
        else if (e.message && e.response.statusText) {
            logger_1.default.error(`Error undeprecating ${app}. ${e.message}. ${e.response.statusText}`);
            yield switchToPreviousAccount(originalAccount, originalWorkspace);
            return;
        }
        else {
            yield switchToPreviousAccount(originalAccount, originalWorkspace);
            throw e;
        }
    }
    yield prepareUndeprecate(ramda_1.tail(appsList));
});
exports.default = (optionalApp, options) => __awaiter(void 0, void 0, void 0, function* () {
    const preConfirm = options.y || options.yes;
    originalAccount = conf_1.getAccount();
    originalWorkspace = conf_1.getWorkspace();
    const appsList = ramda_1.prepend(optionalApp || locator_1.toAppLocator(yield manifest_1.getManifest()), utils_1.parseArgs(options._));
    if (!preConfirm && !(yield promptUndeprecate(appsList))) {
        throw new errors_1.UserCancelledError();
    }
    logger_1.default.debug(`Undeprecating app ${appsList.length > 1 ? 's' : ''} : ${appsList.join(', ')}`);
    return prepareUndeprecate(appsList);
});
