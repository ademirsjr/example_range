"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const clients_1 = require("../../clients");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const locator_1 = require("./../../locator");
const utils_1 = require("./utils");
const { unlink, unlinkAll, listLinks } = clients_1.apps;
const unlinkApp = (app) => __awaiter(void 0, void 0, void 0, function* () {
    manifest_1.validateApp(app);
    try {
        logger_1.default.info('Starting to unlink app:', app);
        yield unlink(app);
        logger_1.default.info('Successfully unlinked', app);
    }
    catch (e) {
        if (e.response.status === 404) {
            logger_1.default.error(`${app} is not linked in the current workspace. \
Make sure you typed the right app vendor, name and version.`);
        }
        else {
            logger_1.default.error(`Error unlinking ${app}.`, e.message);
            if (ramda_1.path(['response', 'data', 'message'], e)) {
                logger_1.default.error(e.response.data.message);
            }
        }
    }
});
const unlinkApps = (appsList) => __awaiter(void 0, void 0, void 0, function* () {
    yield utils_1.validateAppAction('unlink', appsList);
    yield Promise.map(appsList, unlinkApp);
});
const unlinkAllApps = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        logger_1.default.info('Starting to unlink all apps');
        yield unlinkAll();
        logger_1.default.info('Successfully unlinked all apps');
    }
    catch (e) {
        logger_1.default.error('Error unlinking all apps.', e.message);
        if (ramda_1.path(['response', 'data', 'message'], e)) {
            logger_1.default.error(e.response.data.message);
        }
    }
});
exports.default = (optionalApp, options) => __awaiter(void 0, void 0, void 0, function* () {
    const linkedApps = yield listLinks();
    if (linkedApps.length === 0) {
        return logger_1.default.info('No linked apps?');
    }
    if (options.a || options.all) {
        return unlinkAllApps();
    }
    const app = optionalApp || locator_1.toMajorLocator(yield manifest_1.getManifest());
    const appsList = ramda_1.prepend(app, utils_1.parseArgs(options._));
    return unlinkApps(appsList);
});
