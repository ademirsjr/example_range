"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_es6_promise_1 = require("child-process-es6-promise");
const path_1 = require("path");
const R = require("ramda");
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const utils_1 = require("../utils");
const utils_2 = require("./utils");
const basePackageJson = (appName) => ({
    name: appName,
    private: true,
    license: 'UNLICENSED',
    scripts: {
        lint: 'eslint --ext js,jsx,ts,tsx .',
    },
});
const eslintIgnore = `
node_modules
`.trim();
const basePrettierRc = {
    semi: false,
    singleQuote: true,
    trailingComma: 'es5',
    eslintIntegration: true,
};
const lintDeps = {
    eslint: '^6.4.0',
    'eslint-config-vtex': '^11.0.0',
    'eslint-config-vtex-react': '^5.0.1',
    '@types/node': '^12.7.12',
    prettier: '^1.18.2',
    typescript: '^3.5.3',
};
const baseEslintrc = {
    extends: 'vtex',
    root: true,
    env: {
        node: true,
        es6: true,
        jest: true,
    },
};
const customEslintrc = {
    react: {
        extends: 'vtex-react',
        env: {
            browser: true,
            es6: true,
            jest: true,
        },
    },
};
const yarnAddESLint = () => {
    logger_1.default.info('Adding lint configs in app root');
    const lintPackages = R.join(' ', R.values(R.mapObjIndexed((version, name) => `${name}@${version}`, lintDeps)));
    child_process_es6_promise_1.execSync(`${utils_1.yarnPath} add ${lintPackages} --dev`, {
        stdio: 'inherit',
        cwd: path_1.resolve(manifest_1.getAppRoot()),
    });
};
const createESLintSetup = (appName, lintPackages) => {
    try {
        let originalRootPackageJson = {};
        try {
            originalRootPackageJson = utils_2.packageJsonEditor.read('.');
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                logger_1.default.info(`No package.json found in ${path_1.dirname(utils_2.packageJsonEditor.path('.'))}. Creating one.`);
            }
            else {
                logger_1.default.error(err);
                return;
            }
        }
        utils_2.packageJsonEditor.write('.', R.mergeDeepRight(basePackageJson(appName), originalRootPackageJson));
        utils_2.eslintIgnoreEditor.write('.', eslintIgnore);
        utils_2.prettierrcEditor.write('.', basePrettierRc);
        const devDependencies = R.prop('devDependencies', originalRootPackageJson) || {};
        if (R.difference(lintPackages, R.intersection(lintPackages, R.keys(devDependencies))).length !== 0) {
            yarnAddESLint();
        }
        logger_1.default.info('Configuring app .eslintrc.json');
        utils_2.esLintrcEditor.write('.', baseEslintrc);
    }
    catch (e) {
        logger_1.default.error(e);
    }
};
const setupCustomEsLintForBuilder = (builder) => {
    const customConfig = customEslintrc[builder];
    try {
        logger_1.default.info(`Setting up ${builder}'s ESLint config`);
        utils_2.esLintrcEditor.write(builder, customConfig);
    }
    catch (err) {
        logger_1.default.error(err);
    }
};
exports.setupESLint = (manifest, buildersToAddAdditionalPackages) => {
    const builders = R.keys(R.prop('builders', manifest) || {});
    const filteredBuilders = R.intersection(builders, buildersToAddAdditionalPackages);
    const lintPackages = R.keys(lintDeps);
    if (filteredBuilders.length > 0) {
        createESLintSetup(manifest.name, lintPackages);
    }
    const buildersWithCustomLint = R.intersection(builders, R.keys(customEslintrc));
    buildersWithCustomLint.forEach(builder => {
        setupCustomEsLintForBuilder(builder);
    });
};
