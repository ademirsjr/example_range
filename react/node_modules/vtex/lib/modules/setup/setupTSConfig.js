"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = require("ramda");
const clients_1 = require("../../clients");
const logger_1 = require("../../logger");
const utils_1 = require("./utils");
const selectTSConfig = (tsconfigsFromBuilder, version, builder) => {
    const builderTSConfig = R.prop(builder, tsconfigsFromBuilder);
    if (builderTSConfig && R.has(version, builderTSConfig)) {
        return R.prop(version, builderTSConfig);
    }
    return null;
};
exports.setupTSConfig = (manifest) => __awaiter(void 0, void 0, void 0, function* () {
    const { builder: builderClient } = clients_1.createClients({}, { retries: 2 });
    logger_1.default.info(`Fetching BuilderHub tsconfig`);
    const tsconfigsFromBuilder = yield builderClient.builderHubTsConfig();
    const buildersWithBaseTSConfig = R.compose(R.reject(R.isNil), R.mapObjIndexed(R.curry(selectTSConfig)(tsconfigsFromBuilder)), R.prop('builders'))(manifest);
    return R.mapObjIndexed((baseTSConfig, builder) => {
        try {
            let currentTSConfig = {};
            try {
                currentTSConfig = utils_1.tsconfigEditor.read(builder);
            }
            catch (e) {
                if (e.code === 'ENOENT') {
                    logger_1.default.warn(`No tsconfig.json found in ${utils_1.tsconfigEditor.path(builder)}. Generating one...`);
                }
                else {
                    throw e;
                }
            }
            const newTSConfig = R.mergeDeepRight(currentTSConfig, baseTSConfig);
            logger_1.default.info(`Merging BuilderHub ${builder} tsconfig with local ${builder} tsconfig`);
            utils_1.tsconfigEditor.write(builder, newTSConfig);
        }
        catch (e) {
            logger_1.default.error(e);
        }
    })(buildersWithBaseTSConfig);
});
