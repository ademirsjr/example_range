"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const chalk_1 = require("chalk");
const childProcess = require("child_process");
const enquirer = require("enquirer");
const jwt = require("jsonwebtoken");
const opn = require("opn");
const path_1 = require("path");
const ramda_1 = require("ramda");
const randomstring = require("randomstring");
const conf = require("../../conf");
const env_1 = require("../../env");
const logger_1 = require("../../logger");
const sse_1 = require("../../sse");
const prompts_1 = require("../prompts");
const [cachedAccount, cachedLogin, cachedWorkspace] = [conf.getAccount(), conf.getLogin(), conf.getWorkspace()];
const details = cachedAccount && `${chalk_1.default.green(cachedLogin)} @ ${chalk_1.default.green(cachedAccount)} / ${chalk_1.default.green(cachedWorkspace)}`;
const oldLoginUrls = (workspace, state) => {
    const returnUrl = `/_v/private/auth-server/v1/callback?workspace=${workspace}&state=${state}`;
    const url = `/_v/private/auth-server/v1/login/?workspace=${workspace}`;
    return [url, returnUrl];
};
const newLoginUrls = (workspace, state) => {
    const returnUrl = `/_v/private/auth-server/v1/callback?workspace=${workspace}&state=${state}`;
    const url = `/_v/segment/admin-login/v1/login?workspace=${workspace}`;
    return [url, returnUrl];
};
const getLoginUrl = (account, workspace, state) => __awaiter(void 0, void 0, void 0, function* () {
    const baseUrl = `https://${account}${env_1.clusterIdDomainInfix()}.${env_1.publicEndpoint()}`;
    let [url, returnUrl] = newLoginUrls(workspace, state);
    try {
        const response = yield axios_1.default.get(`${baseUrl}${url}`);
        if (!response.data.match(/vtex\.admin-login/)) {
            throw new Error('Unexpected response from admin-login');
        }
    }
    catch (e) {
        const oldUrls = oldLoginUrls(workspace, state);
        url = oldUrls[0];
        returnUrl = oldUrls[1];
    }
    const fullReturnUrl = baseUrl + returnUrl;
    const returnUrlEncoded = encodeURIComponent(returnUrl);
    return [`${baseUrl}${url}&returnUrl=${returnUrlEncoded}`, fullReturnUrl];
});
const startUserAuth = (account, workspace) => __awaiter(void 0, void 0, void 0, function* () {
    const state = randomstring.generate();
    const [url, fullReturnUrl] = yield getLoginUrl(account, workspace, state);
    opn(url, { wait: false });
    return sse_1.onAuth(account, workspace, state, fullReturnUrl);
});
const promptUsePrevious = () => prompts_1.promptConfirm(`Do you want to use the previous login details? (${details})`);
const promptAccount = (promptPreviousAcc) => __awaiter(void 0, void 0, void 0, function* () {
    if (promptPreviousAcc) {
        const confirm = yield prompts_1.promptConfirm(`Use previous account? (${chalk_1.default.blue(cachedAccount)})`);
        if (confirm) {
            return cachedAccount;
        }
    }
    const account = ramda_1.prop('account', yield enquirer.prompt({
        type: 'input',
        result: s => s.trim(),
        message: 'Account:',
        name: 'account',
        validate: s => /^\s*[\w-]+\s*$/.test(s) || 'Please enter a valid account.',
    }));
    return account;
});
exports.saveCredentials = (login, account, token, workspace) => {
    conf.saveLogin(login);
    conf.saveAccount(account);
    conf.saveToken(token);
    conf.saveAccountToken(account, token);
    conf.saveWorkspace(workspace);
};
const authAndSave = (account, workspace, optionWorkspace) => __awaiter(void 0, void 0, void 0, function* () {
    const [token, returnUrl] = yield startUserAuth(account, optionWorkspace ? workspace : 'master');
    const decodedToken = jwt.decode(token);
    const login = decodedToken.sub;
    exports.saveCredentials(login, account, token, workspace);
    return { login, token, returnUrl };
});
const closeChromeTabIfMac = (returnUrl) => {
    if (process.platform === 'darwin') {
        const cp = childProcess.spawn('osascript', [path_1.join(__dirname, '../../../scripts/closeChrome.scpt'), returnUrl], {
            stdio: 'ignore',
            detached: true,
        });
        cp.unref();
    }
};
exports.default = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const defaultArgumentAccount = options && options._ && options._[0];
    const optionAccount = options ? options.a || options.account || defaultArgumentAccount : null;
    const optionWorkspace = options ? options.w || options.workspace : null;
    const usePrevious = !(optionAccount || optionWorkspace) && details && (yield promptUsePrevious());
    const account = optionAccount || (usePrevious && cachedAccount) || (yield promptAccount(cachedAccount && optionWorkspace));
    const workspace = optionWorkspace || (usePrevious && cachedWorkspace) || 'master';
    try {
        const { login, token, returnUrl } = yield authAndSave(account, workspace, optionWorkspace);
        logger_1.default.debug('Login successful', login, account, token, workspace);
        logger_1.default.info(`Logged into ${chalk_1.default.blue(account)} as ${chalk_1.default.green(login)} at workspace ${chalk_1.default.green(workspace)}`);
        closeChromeTabIfMac(returnUrl);
    }
    catch (err) {
        if (err.statusCode === 404) {
            logger_1.default.error('Account/Workspace not found');
        }
        else {
            throw err;
        }
    }
});
