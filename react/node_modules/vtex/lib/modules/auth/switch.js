"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const ramda_1 = require("ramda");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = require("../../logger");
const Token_1 = require("../../Token");
const login_1 = require("./login");
exports.switchAccount = (account, options, previousAccount = conf_1.getAccount()) => __awaiter(void 0, void 0, void 0, function* () {
    const isValidAccount = /^\s*[\w-]+\s*$/.test(account);
    const workspace = options.w || options.workspace || 'master';
    if (!isValidAccount) {
        throw new errors_1.CommandError('Invalid account format');
    }
    else if (!previousAccount) {
        throw new errors_1.CommandError("You're not logged in right now");
    }
    else if (previousAccount === account) {
        throw new errors_1.CommandError(`You're already using the account ${chalk_1.default.blue(account)}`);
    }
    const accountToken = new Token_1.Token(conf_1.getTokens()[account]);
    if (accountToken.isValid()) {
        logger_1.default.debug(`Token stored for ${account}/${accountToken.login} is still valid`);
        login_1.saveCredentials(accountToken.login, account, accountToken.token, workspace);
        logger_1.default.info(`Logged into ${chalk_1.default.blue(conf_1.getAccount())} as ${chalk_1.default.green(conf_1.getLogin())} at workspace ${chalk_1.default.green(conf_1.getWorkspace())}`);
    }
    else {
        logger_1.default.debug(`Token for ${account} isn't stored or isn't valid`);
        return login_1.default({ account, workspace });
    }
});
const hasAccountSwitched = (account) => {
    return account === conf_1.getAccount();
};
exports.default = (account, options) => __awaiter(void 0, void 0, void 0, function* () {
    if (account === '-') {
        account = conf_1.getLastUsedAccount();
        if (account == null) {
            throw new errors_1.CommandError('No last used account was found');
        }
    }
    const previousAccount = conf_1.getAccount();
    // Enable users to type `vtex switch {account}/{workspace}` and switch
    // directly to a workspace without typing the `-w` option.
    const [parsedAccount, parsedWorkspace] = ramda_1.split('/', account);
    if (parsedWorkspace) {
        options = Object.assign(Object.assign({}, options), { w: parsedWorkspace, workspace: parsedWorkspace });
    }
    yield exports.switchAccount(parsedAccount, options);
    if (hasAccountSwitched(parsedAccount)) {
        logger_1.default.info(`Switched from ${chalk_1.default.blue(previousAccount)} to ${chalk_1.default.blue(parsedAccount)}`);
    }
});
