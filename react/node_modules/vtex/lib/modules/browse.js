"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const jwt = require("jsonwebtoken");
const opn = require("opn");
const R = require("ramda");
const conf = require("../conf");
const env_1 = require("../env");
// Doesn't seem to work with 'import', seems to return undefined for some reason ¯\_(ツ)_/¯
const QRCode = require('qrcode-terminal'); // eslint-disable-line @typescript-eslint/no-var-requires
const isSupportRole = (role) => role && role.startsWith('vtex.support-authority');
const isSupportSession = () => {
    const token = conf.getToken();
    const decoded = jwt.decode(token);
    if (!decoded || typeof decoded === 'string') {
        return false;
    }
    return R.any(role => isSupportRole(role), decoded.roles);
};
const prepareSupportBrowser = (account, workspace) => __awaiter(void 0, void 0, void 0, function* () {
    const token = conf.getToken();
    const uri = `https://${workspace}--${account}.${env_1.publicEndpoint()}/_v/private/support-login/prepare`;
    const response = yield axios_1.default.get(uri, {
        headers: {
            'X-Vtex-Original-Credential': token,
        },
    });
    return response.data.oneTimeToken;
});
exports.default = (endpoint = '', { q, qr }) => __awaiter(void 0, void 0, void 0, function* () {
    const { account, workspace } = conf.currentContext;
    if (isSupportSession()) {
        const token = yield prepareSupportBrowser(account, workspace);
        endpoint = `_v/private/support-login/login?token=${token}&returnUrl=/${endpoint}`;
    }
    const uri = `https://${workspace}--${account}${env_1.clusterIdDomainInfix()}.${env_1.publicEndpoint()}/${endpoint}`;
    if (q || qr) {
        QRCode.generate(uri, { small: true });
        return;
    }
    opn(uri, { wait: false });
});
