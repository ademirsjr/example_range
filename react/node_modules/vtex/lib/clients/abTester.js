"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
const routes = {
    Abort: (workspace) => `${routes.ABTester}/finish/${workspace}`,
    ABTester: '/_v/private/abtesting',
    Initialize: (workspace) => `${routes.ABTester}/initialize/${workspace}`,
    InitializeLegacy: (workspace, probability) => `${routes.ABTester}/initialize/${workspace}/${probability}`,
    InitializeWithParameters: (workspace, hours, proportion) => `${routes.ABTester}/initialize/parameters/${workspace}/${hours}/${proportion}`,
    Preview: (probability) => `${routes.ABTester}/time/${probability}`,
    Status: () => `${routes.ABTester}/status`,
};
class ABTester extends api_1.AppClient {
    constructor(context, options) {
        super('vtex.ab-tester', context, options);
        // Abort AB Test in a workspace.
        this.finish = (workspace) => __awaiter(this, void 0, void 0, function* () { return this.http.post(routes.Abort(workspace), {}, { metric: 'abtester-finish' }); });
        // Start AB Test in a workspace with a given proportion of traffic and the duration of this enforcement.
        this.customStart = (workspace, hours, proportion) => __awaiter(this, void 0, void 0, function* () { return this.http.post(routes.InitializeWithParameters(workspace, hours, proportion), {}, { metric: 'abtester-start' }); });
        // Start AB Test in a workspace with a given probability.
        this.startLegacy = (workspace, probability) => __awaiter(this, void 0, void 0, function* () { return this.http.post(routes.InitializeLegacy(workspace, probability), {}, { metric: 'abtester-start' }); });
        // Start AB Test in a workspace.
        this.start = (workspace) => __awaiter(this, void 0, void 0, function* () { return this.http.post(routes.Initialize(workspace), {}, { metric: 'abtester-start' }); });
        // Get estimated AB Test duration.
        this.preview = (significanceLevel) => __awaiter(this, void 0, void 0, function* () { return this.http.get(routes.Preview(significanceLevel), { metric: 'abtester-preview' }); });
        // Get data about running AB Tests.
        this.status = () => __awaiter(this, void 0, void 0, function* () { return this.http.get(routes.Status(), { metric: 'abtester-status' }); });
    }
}
exports.ABTester = ABTester;
