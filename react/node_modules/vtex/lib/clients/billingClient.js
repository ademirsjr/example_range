"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
const errors_1 = require("../errors");
class Billing {
    constructor(ioContext, opts) {
        this.installApp = (appName, termsOfUseAccepted, force) => __awaiter(this, void 0, void 0, function* () {
            const graphQLQuery = `mutation InstallApps{
      install(appName:"${appName}", termsOfUseAccepted:${termsOfUseAccepted}, force:${force}) {
        code
        billingOptions
      }
    }`;
            const { data: { data, errors }, } = yield this.http.postRaw(`/_v/graphql`, { query: graphQLQuery });
            if (errors) {
                throw new errors_1.GraphQlError(errors);
            }
            return data.install;
        });
        this.http = api_1.HttpClient.forWorkspace('billing.vtex', ioContext, opts);
    }
}
exports.default = Billing;
